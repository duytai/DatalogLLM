.decl person(p: symbol)
.decl premises(pr: symbol)
.decl enters(p: symbol, pr: symbol)
.decl remains(p: symbol, pr: symbol)
.decl intoxicated(p: symbol)
.decl under_influence(p: symbol)
.decl violation(p: symbol, pr: symbol)

violation(p, pr) :- person(p), premises(pr), (enters(p, pr); remains(p, pr)), (intoxicated(p); under_influence(p)).
person("Mark").
premises("bar").
premises("railway_station").
enters("Mark", "bar").
intoxicated("Mark").
enters("Mark", "railway_station").
remains("Mark", "railway_station").
violation("Mark", "railway_station").
.output violation