.decl person(p: symbol)
.decl premises(pr: symbol)
.decl matter(m: symbol)
.decl sewage(m: symbol)
.decl waste(m: symbol)
.decl offensive_matter(m: symbol)
.decl causes_entry(p: symbol, m: symbol, pr: symbol)
.decl violation(p: symbol, pr: symbol)

violation(p, pr) :- person(p), premises(pr), causes_entry(p, m, pr), (sewage(m); waste(m); offensive_matter(m)).
premises("factory").
waste("contaminated_waste").
causes_entry("factory", "contaminated_waste", "factory").
violation("factory", "factory").
.output violation