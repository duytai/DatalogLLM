.decl person(p: symbol)
.decl premises(pr: symbol)
.decl matter(m: symbol)
.decl sewage(m: symbol)
.decl waste(m: symbol)
.decl offensive_matter(m: symbol)
.decl causes_entry(p: symbol, m: symbol, pr: symbol)
.decl violation(p: symbol, pr: symbol)

violation(p, pr) :- person(p), premises(pr), causes_entry(p, m, pr), (sewage(m); waste(m); offensive_matter(m)).
person("patron1").
person("patron2").
premises("nightclub").
causes_entry("patron1", "offensive_matter", "nightclub").
causes_entry("patron2", "offensive_matter", "nightclub").
offensive_matter("offensive_matter").
.output violation